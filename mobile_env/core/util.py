from typing import Dict

import matplotlib
import svgpath2mpl

BS_SYMBOL = (
    "M31.5,19c0-4.1-3.4-7.5-7.5-7.5s-7.5,3.4-7.5,7.5c0,2.9,1.6,5.4,4,"
    "6.7l0.9-1.8c-1.7-0.9-2.9-2.8-2.9-4.9c0-3,2.5-5.5,5.5-5.5s5.5,2.5,"
    "5.5,5.5c0,2.1-1.2,3.9-2.9,4.9l0.9,1.8C29.9,24.4,31.5,21.9,31.5,19"
    "zM37,19c0-7.2-5.8-13-13-13s-13,5.8-13,13c0,5.1,2.9,9.4,7.1,11.6l0"
    ".9-1.8c-3.6-1.8-6-5.5-6-9.8c0-6.1,4.9-11,11-11s11,4.9,11,11c0,4.3"
    "-2.5,8-6,9.8l0.9,1.8C34.1,28.4,37,24.1,37,19zM42,19c0-9.9-8.1-18-"
    "18-18S6,9.1,6,19c0,7,4.1,13.1,10,16.1l0.9-1.8C11.6,30.7,8,25.2,8,1"
    "9c0-8.8,7.2-16,16-16s16,7.2,16,16c0,6.2-3.6,11.7-8.8,14.3l0.9,1.8C"
    "37.9,32.1,42,26,42,19zM24,22c-1.7,0-3-1.3-3-3s1.3-3,3-3s3,1.3,3,3S"
    "25.7,22,24,22z M24,18c-0.6,0-1,0.4-1,1s0.4,1,1,1s1-0.4,1-1S24.6,18"
    ",24,18zM34.2,44.1L24,23.1l-10.2,21c-0.3,0.6-0.3,1.3,0.1,1.9c0.4,0."
    "6,1,0.9,1.7,0.9h16.8c0.7,0,1.3-0.4,1.7-0.9C34.5,45.5,34.5,44.7,34."
    "2,44.1z M25,29.8l2.2,4.4L25,36V29.8z M23,36l-2.2-1.8l2.2-4.4V36zM2"
    "2.5,38.2l-6,5.1l3.5-7.3L22.5,38.2zM23,40.4V45h-5.5L23,40.4z M25,40"
    ".3l5.5,4.7H25V40.3z M25.6,38.2l2.5-2.1l3.5,7.2L25.6,38.2z"
)

BS_SYMBOL = svgpath2mpl.parse_path(BS_SYMBOL)
BS_SYMBOL.vertices -= BS_SYMBOL.vertices.mean(axis=0)
# rotate (otherwise up side down): https://stackoverflow.com/a/48231144/2745116
transform = matplotlib.transforms.Affine2D().rotate_deg(180)
BS_SYMBOL = BS_SYMBOL.transformed(transform)

SENSOR_SYMBOL = ("M166.67 132.15c9.53,0 18.16,3.86 24.41,10.11 6.25,6.25 10.11,14.87 10.11,24.41 0,9.53 -3.86,18.16 -10.11,24.41 -6.25,6.25 -14.87,10.11 -24.41,10.11 -9.53,0 -18.16,-3.86 -24.41,-10.11 -6.25,-6.25 -10.11,-14.88 -10.11,-24.41 0,-9.53 3.86,-18.16 10.11,-24.41 6.25,-6.25 14.88,-10.11 24.41,-10.11zm104.66 -70.15c-2.99,-2.99 -2.99,-7.83 0,-10.82 2.99,-2.99 7.83,-2.99 10.82,0 31.89,31.89 47.83,73.69 47.83,115.48 0,41.8 -15.94,83.59 -47.83,115.48 -2.99,2.99 -7.83,2.99 -10.82,0 -2.99,-2.99 -2.99,-7.83 0,-10.82 28.9,-28.9 43.35,-66.78 43.35,-104.66 0,-37.88 -14.45,-75.76 -43.35,-104.66zm-209.32 209.32c2.99,2.99 2.99,7.83 0,10.82 -2.99,2.99 -7.83,2.99 -10.82,0 -31.89,-31.89 -47.83,-73.69 -47.83,-115.48 0,-41.8 15.94,-83.59 47.83,-115.48 2.99,-2.99 7.83,-2.99 10.82,0 2.99,2.99 2.99,7.83 0,10.82 -28.9,28.9 -43.35,66.78 -43.35,104.66 0,37.88 14.45,75.76 43.35,104.66zm179.21 -179.21c-2.99,-2.99 -2.99,-7.83 0,-10.83 2.99,-2.99 7.83,-2.99 10.83,0 23.57,23.58 35.36,54.48 35.36,85.37 0,30.9 -11.79,61.8 -35.36,85.37 -2.99,2.99 -7.84,2.99 -10.83,0 -2.99,-2.99 -2.99,-7.84 0,-10.83 20.58,-20.58 30.88,-47.57 30.88,-74.55 0,-26.98 -10.3,-53.96 -30.88,-74.55zm-149.09 149.09c2.99,2.99 2.99,7.83 0,10.83 -2.99,2.99 -7.83,2.99 -10.83,0 -23.57,-23.58 -35.36,-54.48 -35.36,-85.37 0,-30.9 11.79,-61.8 35.36,-85.37 2.99,-2.99 7.84,-2.99 10.83,0 2.99,2.99 2.99,7.84 0,10.83 -20.58,20.58 -30.88,47.57 -30.88,74.55 0,26.98 10.3,53.96 30.88,74.55zm116.57 -116.57c-2.99,-2.99 -2.99,-7.84 0,-10.83 2.99,-2.99 7.84,-2.99 10.83,0 14.59,14.59 21.89,33.72 21.89,52.85 0,19.13 -7.3,38.26 -21.89,52.85 -2.99,2.99 -7.83,2.99 -10.83,0 -2.99,-2.99 -2.99,-7.83 0,-10.83 11.61,-11.6 17.41,-26.81 17.41,-42.03 0,-15.21 -5.8,-30.43 -17.41,-42.03zm-84.06 84.06c2.99,2.99 2.99,7.84 0,10.83 -2.99,2.99 -7.84,2.99 -10.83,0 -14.59,-14.59 -21.89,-33.72 -21.89,-52.85 0,-19.13 7.3,-38.26 21.89,-52.85 2.99,-2.99 7.83,-2.99 10.83,0 2.99,2.99 2.99,7.83 0,10.83 -11.61,11.6 -17.41,26.81 -17.41,42.03 0,15.21 5.8,30.43 17.41,42.03zm55.61 -55.61c-3.47,-3.48 -8.28,-5.63 -13.58,-5.63 -5.3,0 -10.11,2.15 -13.58,5.63 -3.48,3.47 -5.63,8.28 -5.63,13.58 0,5.3 2.15,10.11 5.63,13.58 3.47,3.48 8.28,5.63 13.58,5.63 5.3,0 10.11,-2.15 13.58,-5.63 3.48,-3.47 5.63,-8.28 5.63,-13.58 0,-5.3 -2.15,-10.11 -5.63,-13.58z")
SENSOR_SYMBOL = svgpath2mpl.parse_path(SENSOR_SYMBOL)
SENSOR_SYMBOL.vertices -= SENSOR_SYMBOL.vertices.mean(axis=0)
transform = matplotlib.transforms.Affine2D().rotate_deg(180)
SENSOR_SYMBOL = SENSOR_SYMBOL.transformed(transform)

def deep_dict_merge(dest: Dict, source: Dict):
    """Merge dictionaries recursively (i.e. deep merge)."""
    for key, value in source.items():
        if isinstance(value, dict):
            # get node or create one
            node = dest.setdefault(key, {})
            deep_dict_merge(node, value)
        else:
            dest[key] = value

    return dest
